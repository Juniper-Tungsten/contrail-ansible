---
- name: fail in case of invalid os_release
  fail: msg="os_release should be one of {{ valid_os_release }}"
  when: "os_release not in valid_os_release"

- name: Install python-setuptools
  package: name=python-setuptools state=present

- name: Make sure pip is installed
  easy_install: name=pip state=present

- name: "Make sure docker-py is installed"
  pip: name=docker-py version={{ docker_py_version }}
  when: ansible_os_family != 'RedHat'

- name: "Install python-docker-py in RedHat"
  package: name=python-docker-py state=present
  when: ansible_os_family == 'RedHat'

- include: "repo/{{ ansible_os_family }}.yml"
  tags: [repo]
  when: "'contrail-repo' in group_names"

- include: host.yml
  tags: [always]

- name: Create analytics_list_derived
  set_fact:
    analytics_list_derived: "{{ analytics_list_derived|default({}) | combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | count != 0) | ternary(hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ groups['contrail-analytics'] }}"
  when: ctrl_data_network is defined

- name: Create analytics_list with ctrl_data_ip if defined and ctrl_data_network is not defined
  set_fact:
    analytics_list: "{{ analytics_list + [hostvars[item].get('ctrl_data_ip', item)] }}"
  with_items: "{{ groups['contrail-analytics'] }}"
  when: ctrl_data_network is not defined

- name: Create analytics_list when ctrl_data_network is defined
  set_fact:
    analytics_list: "{{ analytics_list + [hostvars[item].get('ctrl_data_ip', analytics_list_derived.get(item, item))] }}"
  with_items: "{{ groups['contrail-analytics'] }}"
  when: ctrl_data_network is defined

- name: Create analyticsdb_list_derived
  set_fact:
    analyticsdb_list_derived: "{{ analyticsdb_list_derived|default({}) | combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | count != 0) | ternary(hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ groups['contrail-analyticsdb'] }}"
  when: ctrl_data_network is defined

- name: Create analyticsdb_list with ctrl_data_ip if defined and ctrl_data_network is not defined
  set_fact:
    analyticsdb_list: "{{ analyticsdb_list + [hostvars[item].get('ctrl_data_ip', item)] }}"
  with_items: "{{ groups['contrail-analyticsdb'] }}"
  when: ctrl_data_network is not defined

- name: Create analyticsdb_list when ctrl_data_network is defined
  set_fact:
    analyticsdb_list: "{{ analyticsdb_list + [hostvars[item].get('ctrl_data_ip', analyticsdb_list_derived.get(item, item))] }}"
  with_items: "{{ groups['contrail-analyticsdb'] }}"
  when: ctrl_data_network is defined

- name: Create controller_list_derived
  set_fact:
    controller_list_derived: "{{ controller_list_derived|default({}) | combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | count != 0) | ternary(hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ groups['contrail-controllers'] }}"
  when: ctrl_data_network is defined

- name: Create controller_list with ctrl_data_ip if defined and ctrl_data_network is not defined
  set_fact:
    controller_list: "{{ controller_list + [hostvars[item].get('ctrl_data_ip', item)] }}"
  with_items: "{{ groups['contrail-controllers'] }}"
  when: ctrl_data_network is not defined

- name: Create controller_list when ctrl_data_network is defined
  set_fact:
    controller_list: "{{ controller_list + [hostvars[item].get('ctrl_data_ip', controller_list_derived.get(item, item))] }}"
  with_items: "{{ groups['contrail-controllers'] }}"
  when: ctrl_data_network is defined

- name: Create compute_list_derived
  set_fact:
    compute_list_derived: "{{ compute_list_derived|default({}) | combine( {item: (hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | count != 0) | ternary(hostvars[item]['ansible_all_ipv4_addresses'] | ipaddr( ctrl_data_network ) | first, item)} ) }}"
  with_items:
      - "{{ groups['contrail-compute'] }}"
  when: ctrl_data_network is defined

- name: Create compute_list with ctrl_data_ip if defined and ctrl_data_network is not defined
  set_fact:
    compute_list: "{{ compute_list + [hostvars[item].get('ctrl_data_ip', item)] }}"
  with_items: "{{ groups['contrail-compute'] }}"
  when: ctrl_data_network is not defined

- name: Create compute_list when ctrl_data_network is defined
  set_fact:
    compute_list: "{{ compute_list + [hostvars[item].get('ctrl_data_ip', compute_list_derived.get(item, item))] }}"
  with_items: "{{ groups['contrail-compute'] }}"
  when: ctrl_data_network is defined

- name: Create config_server_list_derived
  set_fact:
      config_server_list_derived: "{{config_server_list_derived + [hostvars[item].get('ctrl_data_ip', controller_list_derived.get(item, item))] if 'config' in hostvars[item].get('controller_components', []) else config_server_list_derived}}"
  with_items: "{{ groups['contrail-controllers'] }}"
  when: ctrl_data_network is defined

- name: Create config_server_list_derived when ctrl_data_network is not defined
  set_fact:
      config_server_list_derived: "{{config_server_list_derived + [hostvars[item].get('ctrl_data_ip', item)] if 'config' in hostvars[item].get('controller_components', []) else config_server_list_derived}}"
  with_items: "{{ groups['contrail-controllers'] }}"
  when: ctrl_data_network is not defined

- name: Set config_ip
  set_fact:
      config_ip: "{{ controller_list[0] }}"
  when: config_ip is not defined

- name: Set controller_ip
  set_fact:
      controller_ip: "{{ controller_list[0] }}"
  when: controller_ip is not defined

- name: Set analytics_ip
  set_fact:
      analytics_ip: "{{ controller_list[0] }}"
  when: analytics_ip is not defined

- include: lb.yml
  tags: [container.lb, lb]
  when: "'contrail-lb' in group_names"

- include: controller.yml
  tags: [container.controller, controller]
  when: "'contrail-controllers' in group_names"

- include: analyticsdb.yml
  tags: [container.analyicsdb, analyticsdb]
  when: "'contrail-analyticsdb' in group_names"

- include: analytics.yml
  tags: [container.analytics, analytics]
  when: "'contrail-analytics' in group_names"

- include: kube_manager.yml
  tags: [container.kube_manager, kube_manager]
  when: "'contrail-kubernetes' in group_names and cloud_orchestrator in ['kubernetes', 'openshift']"

- include: "agent/{{ contrail_compute_mode }}.yml"
  tags: [container.agent, agent]
  when: "'contrail-compute' in group_names"

- include: kube_cni.yml
  tags: [container.kube_cni, kube_cni]
  when: "'contrail-compute' in group_names and cloud_orchestrator in ['kubernetes', 'mesos', 'openshift']"

- include: mesos_manager.yml
  tags: [container.mesos_manager, mesos_manager]
  when: "'contrail-compute' in group_names and cloud_orchestrator == 'mesos'"
